// LICENSE : MIT
"use strict";
/**
 * DispatcherPayloadMeta is a meta object for dispatcher.
 * If `isTrusted` is true, the object is created by System(= Almin).
 * The user can get this meta object together with dispatched `payload` object
 * @example
 * context.onDispatch((payload, meta) => {
 *    console.log(meta);
 * });
 */
export default class DispatcherPayloadMeta {
    /**
     * @param {UseCase} [useCase]
     * @param {UseCase|Dispatcher} dispatcher
     * @param {UseCase|null} [parentUseCase]
     * @param {boolean} isTrusted true if the payload object is generated by Almin.
     */
    constructor({
        useCase,
        dispatcher,
        parentUseCase,
        isTrusted
    } = {}) {
        /**
         * A reference to the useCase/dispatcher to which the payload was originally dispatched.
         * @type {UseCase|Dispatcher|null}
         * @readonly
         * @public
         */
        this.useCase = useCase || null;
        /**
         * A dispatcher of the payload
         * In other word, the payload is dispatched by `this.dispatcher`
         *
         * ## dispatcher in a useCase
         *
         * In following example, this.dispatcher is same with this.useCase.
         *
         * class Example extends UseCase {
         *     execute(){
         *        this.dispatch({ type })
         *        ^^^^
         *        === this dispatcher === this.useCase
         *     }
         * }
         * @type {Dispatcher|UseCase|null}
         * @readonly
         * @public
         */
        this.dispatcher = dispatcher;
        /**
         * A parent useCase of the `this.useCase`,
         * When useCase is nesting, parentUseCase is a UseCase.
         * @type {UseCase|Dispatcher|null}
         * @readonly
         * @public
         */
        this.parentUseCase = parentUseCase || null;
        /**
         * A timeStamp is created time of the meta.
         * @type {number}
         * @readonly
         * @public
         */
        this.timeStamp = Date.now();
        /**
         * If the payload object is generated by Almin, true
         * The use can use it for detecting "Is the payload generated by system(almin)?".
         * It is similar with https://www.w3.org/TR/DOM-Level-3-Events/#trusted-events
         * @type {boolean}
         * @readonly
         * @public
         */
        this.isTrusted = isTrusted;
    }
}