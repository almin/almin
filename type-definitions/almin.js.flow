/**
 * This file provides type definitions for use with the Flow type checker.
 *
 * @flow
 */

type DispatcherPayload = Object;
// Internal class
declare class DispatcherPayloadMeta {
    useCase: ?UseCase;
    dispatcher: ?Dispatcher | UseCase;
    parentUseCase: ?UseCase;
    timeStamp: number;
    isTrusted: boolean;
}

declare class QueuedStoreGroup extends Dispatcher {
    getState(): Object;
    emitChange(): void;
    onChange(handler: (stores: Array<Store>) => mixed): Function;
    release(): void;
}

declare class StoreGroup extends Dispatcher {
    getState(): Object;
    emitChange(): void;
    onChange(handler: (stores: Array<Store>) => mixed): Function;
    release(): void;
}

declare class Context {
    getState(): mixed;
    onChange(onChangeHandler: (changingStores: Array<Store>) => mixed): Function;
    useCase(useCase: UseCase): UseCaseExecutor;
    onWillExecuteEachUseCase(handler: (payload: DispatcherPayload, meta: DispatcherPayloadMeta) => mixed): Function;
    onDispatch(handler: (payload: DispatcherPayload, meta: DispatcherPayloadMeta) => mixed): Function;
    onDidExecuteEachUseCase(handler: (payload: DispatcherPayload, meta: DispatcherPayloadMeta) => mixed): Function;
    onCompleteExecuteEachUseCase(handler: (payload: DispatcherPayload, meta: DispatcherPayloadMeta) => mixed): Function;
    onErrorDispatch(handler: (payload: DispatcherPayload, meta: DispatcherPayloadMeta) => mixed): Function;
    release(): void;
}


declare class Dispatcher extends events$EventEmitter {
    static isDispatcher(maybeDispatcher: mixed): boolean;

    onDispatch(payloadHandler: (payload: DispatcherPayload) => mixed): Function;
    dispatch(payload: DispatcherPayload): void;
    pipe(toDispatcher: Dispatcher): Function;
}

declare class Store extends Dispatcher {
    static isStore(maybeStore: mixed): boolean;

    getState(prevState: Object): Object;
    onChange(callback: Function): Function;
    emitChange(): void;
}

declare class UseCase extends Dispatcher {
    static isUseCase(maybeUseCase: mixed): boolean;

    id: string;
    name: string;
    context(): UseCaseContext;
    onError(errorHandler: (error: Error) => mixed): Function;
    throwError(error: Error): void;
}

declare class UseCaseContext {
    useCase(useCase: UseCase): UseCaseExecutor;
}

declare class UseCaseExecutor {
    onWillExecuteEachUseCase(handler: (payload: DispatcherPayload, meta: DispatcherPayloadMeta) => mixed): void;
    onDidExecuteEachUseCase(handler: (payload: DispatcherPayload, meta: DispatcherPayloadMeta) => mixed): void;
    onCompleteExecuteEachUseCase(handler: (payload: DispatcherPayload, meta: DispatcherPayloadMeta) => mixed): Function;
    execute(args: Array<mixed>): void;
    release(): void;
}

export {
    Dispatcher,
    Store,
    StoreGroup,
    QueuedStoreGroup,
    UseCaseContext,
    UseCase,
    Context,
}
