{"version":3,"sources":["../__obj/src/Store.js"],"names":["STATE_CHANGE_EVENT","defaultStoreName","Store","own","constructor","name","displayName","isStore","v","getState","onChange","setState","newState","shouldStateUpdate","state","prevState","nextState","cb","on","removeListener","bind","emitChange","emit","release","removeAllListeners","prototype","Error"],"mappings":"AAAA;AACA;;;;;;;;;AACA;;AACA;;;;;;;;;;AACA,IAAMA,qBAAqB,oBAA3B;AACA;;;;AAIO,IAAMC,8CAAmB,mBAAzB;AACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgDaC,K,WAAAA,K;;;AACT;;;AAGA,qBAAc;AAAA;;AAAA,qDACV,sBADU;;AAEV,YAAMC,MAAM,MAAKC,WAAjB;AACA;;;AAGA,cAAKC,IAAL,GAAYF,IAAIG,WAAJ,IAAmBH,IAAIE,IAAvB,IAA+BJ,gBAA3C;AANU;AAOb;AACD;;;;;UAGOM,O,oBAAQC,C,EAAG;AACd,YAAIA,aAAaN,KAAjB,EAAwB;AACpB,mBAAO,IAAP;AACH,SAFD,MAGK,IAAI,QAAOM,CAAP,yCAAOA,CAAP,OAAa,QAAb,IAAyB,OAAOA,EAAEC,QAAT,KAAsB,UAA/C,IAA6D,OAAOD,EAAEE,QAAT,KAAsB,UAAvF,EAAmG;AACpG,mBAAO,IAAP;AACH;AACD,eAAO,KAAP;AACH,K;AACD;;;;;;oBAIAC,Q,qBAASC,Q,EAAU;AACf,YAAI,KAAKC,iBAAL,CAAuB,KAAKC,KAA5B,EAAmCF,QAAnC,CAAJ,EAAkD;AAC9C,iBAAKE,KAAL,GAAaF,QAAb;AACH;AACJ,K;AACD;;;;;;;;oBAMAC,iB,8BAAkBE,S,EAAWC,S,EAAW;AACpC,eAAO,CAAC,sCAAaD,SAAb,EAAwBC,SAAxB,CAAR;AACH,K;AACD;;;;;;;;;;;;;;;;oBAcAN,Q,qBAASO,E,EAAI;AACT,aAAKC,EAAL,CAAQlB,kBAAR,EAA4BiB,EAA5B;AACA,eAAO,KAAKE,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,EAA+BpB,kBAA/B,EAAmDiB,EAAnD,CAAP;AACH,K;AACD;;;;;;oBAIAI,U,yBAAa;AACT,aAAKC,IAAL,CAAUtB,kBAAV,EAA8B,CAAC,IAAD,CAA9B;AACH,K;AACD;;;;;oBAGAuB,O,sBAAU;AACN,aAAKC,kBAAL,CAAwBxB,kBAAxB;AACH,K;;;;AAEL;;;AACAE,MAAMuB,SAAN,CAAgBhB,QAAhB,GAA2B,YAAY;AACnC,UAAM,IAAIiB,KAAJ,CAAa,KAAKrB,IAAlB,qDAAN;AACH,CAFD","file":"Store.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { Dispatcher } from \"./Dispatcher\";\nimport { shallowEqual } from \"shallow-equal-object\";\nconst STATE_CHANGE_EVENT = \"STATE_CHANGE_EVENT\";\n/**\n * @type {string}\n * @private\n */\nexport const defaultStoreName = \"<Anonymous-Store>\";\n/**\n * Store hold the state of your application.\n *\n * Typically, `Store` has a parts of the whole state tree of your application.\n * `StoreGroup` is the the whole state tree.\n *\n * It means that `StoreGroup` is a collection of `Store` instances.\n *\n * A UseCase `dispatch(payload)` and `Store` can receive it.\n *\n * ### Abstraction Code\n *\n * This is imagination code. (It will not work.)\n *\n * ```js\n * abcUseCase\n *  .dispatch({\n *      type: \"ABC\",\n *      value: \"value\"\n *  });\n *\n * abcStore\n *  .onDispatch(({ type, value }) => {\n *      console.log(type);  // \"ABC\"\n *      console.log(value); // 42\n *  });\n * ```\n *\n * ### Example\n *\n * To implement store, you have to inherit `Store` class.\n *\n * ```js\n * class YourStore extends Store {\n *    constructor(){\n *       super();\n *       this.state = {\n *          foo : \"bar\"\n *       };\n *    }\n *    getState(){\n *      return {\n *          yourStore: this.state\n *      };\n *    }\n * }\n * ```\n */\nexport class Store extends Dispatcher {\n    /**\n     * Constructor not have arguments.\n     */\n    constructor() {\n        super();\n        const own = this.constructor;\n        /**\n         * @type {string} Store name\n         */\n        this.name = own.displayName || own.name || defaultStoreName;\n    }\n    /**\n     * Return true if the `v` is store like.\n     */\n    static isStore(v) {\n        if (v instanceof Store) {\n            return true;\n        }\n        else if (typeof v === \"object\" && typeof v.getState === \"function\" && typeof v.onChange === \"function\") {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Update own state property if needed.\n     * If `this.shouldStateUpdate(currentState, newState)` return true, update `this.state` property with `newState`.\n     */\n    setState(newState) {\n        if (this.shouldStateUpdate(this.state, newState)) {\n            this.state = newState;\n        }\n    }\n    /**\n     * If the prev/next state is difference, should return true.\n     *\n     * Use Shallow Object Equality Test by default.\n     * <https://github.com/sebmarkbage/ecmascript-shallow-equal>\n     */\n    shouldStateUpdate(prevState, nextState) {\n        return !shallowEqual(prevState, nextState);\n    }\n    /**\n     * Subscribe change event of the store.\n     * When `Store#emitChange()` is called, then call subscribers.\n     *\n     * ### Example\n     *\n     * ```js\n     * store.onChange((changingStores) => {\n     *    console.log(changingStores); // [store]\n     * });\n     *\n     * store.emitChange();\n     * ```\n     */\n    onChange(cb) {\n        this.on(STATE_CHANGE_EVENT, cb);\n        return this.removeListener.bind(this, STATE_CHANGE_EVENT, cb);\n    }\n    /**\n     * Emit \"change\" event to subscribers.\n     * If you want to notify changing ot tha store, call `Store#emitChange()`.\n     */\n    emitChange() {\n        this.emit(STATE_CHANGE_EVENT, [this]);\n    }\n    /**\n     * Release all event handlers\n     */\n    release() {\n        this.removeAllListeners(STATE_CHANGE_EVENT);\n    }\n}\n// Implement assertion\nStore.prototype.getState = function () {\n    throw new Error(`${this.name} should be implemented Store#getState(): Object`);\n};\n"]}