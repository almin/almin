{"version":3,"sources":["../__obj/src/UseCase.js"],"names":["defaultUseCaseName","UseCase","isUseCase","v","execute","id","own","constructor","name","displayName","TypeError","dispatch","payload","meta","useCaseMeta","useCase","dispatcher","parentUseCase","isTrusted","isUseCaseFinished","onError","errorHandler","onDispatch","error","throwError"],"mappings":"AAAA;AACA;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AACO,IAAMA,kDAAqB,qBAA3B;AACP;;;;;;;;;;;;;;;;;;IAiBaC,O,WAAAA,O;;;AACT;;;YAGOC,S,sBAAUC,C,EAAG;AAChB,YAAIA,aAAaF,OAAjB,EAA0B;AACtB,mBAAO,IAAP;AACH,SAFD,MAGK,IAAI,QAAOE,CAAP,yCAAOA,CAAP,OAAa,QAAb,IAAyB,OAAOA,EAAEC,OAAT,KAAqB,UAAlD,EAA8D;AAC/D,mBAAO,IAAP;AACH;AACD,eAAO,KAAP;AACH,K;AACD;;;;;AAGA,uBAAc;AAAA;;AAAA,qDACV,sBADU;;AAEV,cAAKC,EAAL,GAAU,wCAAV;AACA,YAAMC,MAAM,MAAKC,WAAjB;AACA,cAAKC,IAAL,GAAYF,IAAIG,WAAJ,IAAmBH,IAAIE,IAAvB,IAA+BR,kBAA3C;AAJU;AAKb;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;;;;;;;sBAeAI,O,sBAAc;AACV,cAAM,IAAIM,SAAJ,0BAAqC,KAAKH,WAAL,CAAiBC,IAAtD,gBAAN;AACH,K;AACD;;;;;;;sBAKAG,Q,qBAASC,O,EAASC,I,EAAM;AACpB;AACA;AACA,YAAMC,cAAcD,OACdA,IADc,GAEd,qDAA8B;AAC5B;AACAE,qBAAS,IAFmB;AAG5B;AACAC,wBAAY,IAJgB;AAK5B;AACAC,2BAAe,IANa;AAO5B;AACAC,uBAAW,KARiB;AAS5B;AACAC,+BAAmB;AAVS,SAA9B,CAFN;AAcA,8BAAMR,QAAN,YAAeC,OAAf,EAAwBE,WAAxB;AACH,K;AACD;;;;;sBAGAM,O,oBAAQC,Y,EAAc;AAClB,eAAO,KAAKC,UAAL,CAAgB,mBAAW;AAC9B,gBAAI,kCAAeV,OAAf,CAAJ,EAA6B;AACzBS,6BAAcT,OAAD,CAAUW,KAAvB;AACH;AACJ,SAJM,CAAP;AAKH,K;AACD;;;;;;;;sBAMAC,U,uBAAWD,K,EAAO;AACd,YAAMV,OAAO,qDAA8B;AACvCE,qBAAS,IAD8B;AAEvCC,wBAAY,IAF2B;AAGvCE,uBAAW,IAH4B;AAIvCC,+BAAmB;AAJoB,SAA9B,CAAb;AAMA,YAAMP,UAAU,+BAAiB;AAC7BW;AAD6B,SAAjB,CAAhB;AAGA,aAAKZ,QAAL,CAAcC,OAAd,EAAuBC,IAAvB;AACH,K;;;;4BAxEa;AACV,mBAAO,mCAAmB,IAAnB,CAAP;AACH","file":"UseCase.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { Dispatcher } from \"./Dispatcher\";\nimport { UseCaseContext } from \"./UseCaseContext\";\nimport { DispatcherPayloadMetaImpl } from \"./DispatcherPayloadMeta\";\nimport { ErrorPayload, isErrorPayload } from \"./payload/ErrorPayload\";\nimport { generateNewId } from \"./UseCaseIdGenerator\";\nexport const defaultUseCaseName = \"<Anonymous-UseCase>\";\n/**\n * A `UseCase` class is inherited Dispatcher.\n * The user implement own user-case that is inherited UseCase class\n *\n * It similar to ActionCreator on Flux.\n *\n * ### Example\n *\n * ```js\n * import {UseCase} from \"almin\";\n * class AwesomeUseCase extends UseCase {\n *    execute(){\n *       // implementation own use-case\n *   }\n * }\n * ```\n */\nexport class UseCase extends Dispatcher {\n    /**\n     * Return true if the `v` is a UseCase-like.\n     */\n    static isUseCase(v) {\n        if (v instanceof UseCase) {\n            return true;\n        }\n        else if (typeof v === \"object\" && typeof v.execute === \"function\") {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Constructor not have arguments.\n     */\n    constructor() {\n        super();\n        this.id = generateNewId();\n        const own = this.constructor;\n        this.name = own.displayName || own.name || defaultUseCaseName;\n    }\n    /**\n     * Get `context` of UseCase.\n     * You can execute sub UseCase using UseCaseContext object.\n     *\n     * See following for more details.\n     *\n     * - [UseCaseContext](https://almin.js.org/docs/api/UseCaseContext.html)\n     * - [Nesting UseCase](https://almin.js.org/docs/tips/nesting-usecase.html)\n     *\n     * ### Example\n     *\n     * ```js\n     * // Parent -> ChildUseCase\n     * export class ParentUseCase extends UseCase {\n     *     execute() {\n     *         // execute child use-case using UseCaseContext object.\n     *         return this.context.useCase(new ChildUseCase()).execute();\n     *     }\n     * }\n     * export class ChildUseCase extends UseCase {\n     *     execute() {\n     *         this.dispatch({\n     *             type: \"ChildUseCase\"\n     *         });\n     *     }\n     * }\n     * ```\n     */\n    get context() {\n        return new UseCaseContext(this);\n    }\n    /**\n     * `UseCase#execute()` method should be overwrite by subclass.\n     *\n     * ### Example\n     *\n     * ```js\n     * class AwesomeUseCase extends UseCase {\n     *    execute(){\n     *       // implementation own use-case\n     *   }\n     * }\n     * ```\n     *\n     *  FIXME: mark this as `abstract` property.\n     */\n    execute(..._) {\n        throw new TypeError(`should be overwrite ${this.constructor.name}#execute()`);\n    }\n    /**\n     * Dispatch `payload` object.\n     *\n     * `Store` or `Context` can receive the `payload` object.n\n     */\n    dispatch(payload, meta) {\n        // system dispatch has meta\n        // But, when meta is empty, the `payload` object generated by user\n        const useCaseMeta = meta\n            ? meta\n            : new DispatcherPayloadMetaImpl({\n                // this dispatch payload generated by this UseCase\n                useCase: this,\n                // dispatcher is the UseCase\n                dispatcher: this,\n                // parent is the same with UseCase. because this useCase dispatch the payload\n                parentUseCase: null,\n                // the user create this payload\n                isTrusted: false,\n                // Always false because the payload is dispatched from this working useCase.\n                isUseCaseFinished: false\n            });\n        super.dispatch(payload, useCaseMeta);\n    }\n    /**\n     * `errorHandler` is called with error when error is thrown.\n     */\n    onError(errorHandler) {\n        return this.onDispatch(payload => {\n            if (isErrorPayload(payload)) {\n                errorHandler((payload).error);\n            }\n        });\n    }\n    /**\n     * Throw error payload.\n     *\n     * You can use it instead of `throw new Error()`\n     * This error event is caught by dispatcher.\n     */\n    throwError(error) {\n        const meta = new DispatcherPayloadMetaImpl({\n            useCase: this,\n            dispatcher: this,\n            isTrusted: true,\n            isUseCaseFinished: false\n        });\n        const payload = new ErrorPayload({\n            error\n        });\n        this.dispatch(payload, meta);\n    }\n}\n"]}