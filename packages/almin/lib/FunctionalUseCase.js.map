{"version":3,"sources":["../__obj/src/FunctionalUseCase.js"],"names":["defaultUseCaseName","FunctionalUseCase","functionUseCase","dispatcher","context","executor","id","name","displayName","execute","throwError","error","meta","useCase","isTrusted","isUseCaseFinished","payload","dispatch"],"mappings":"AAAA;AACA;;;;;;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AACO,IAAMA,kDAAqB,qBAA3B;AACP;;;;;;;;;;;;;IAYaC,iB,WAAAA,iB;;;AACT,+BAAYC,eAAZ,EAA6BC,UAA7B,EAAyC;AAAA;;AAAA,qDACrC,sBADqC;;AAErC,YAAMC,UAAU;AACZD;AADY,SAAhB;AAGA,cAAKA,UAAL,GAAkBA,UAAlB;AACA;;;;;AAKA,cAAKE,QAAL,GAAgBH,gBAAgBE,OAAhB,CAAhB;AACA,cAAKE,EAAL,GAAU,wCAAV;AACA,cAAKC,IAAL,GAAYL,gBAAgBM,WAAhB,IAA+BN,gBAAgBK,IAA/C,IAAuDP,kBAAnE;AAbqC;AAcxC;AACD;;;;;gCAGAS,O,sBAAc;AACV,eAAO,KAAKJ,QAAL,uBAAP;AACH,K;AACD;;;;;;gCAIAK,U,uBAAWC,K,EAAO;AACd,YAAMC,OAAO,qDAA8B;AACvCC,qBAAS,IAD8B;AAEvCV,wBAAY,IAF2B;AAGvCW,uBAAW,IAH4B;AAIvCC,+BAAmB;AAJoB,SAA9B,CAAb;AAMA,YAAMC,UAAU,+BAAiB;AAC7BL;AAD6B,SAAjB,CAAhB;AAGA,aAAKM,QAAL,CAAcD,OAAd,EAAuBJ,IAAvB;AACH,K","file":"FunctionalUseCase.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { Dispatcher } from \"./Dispatcher\";\nimport { generateNewId } from \"./UseCaseIdGenerator\";\nimport { DispatcherPayloadMetaImpl } from \"./DispatcherPayloadMeta\";\nimport { ErrorPayload } from \"./payload/ErrorPayload\";\nexport const defaultUseCaseName = \"<Functiona-UseCase>\";\n/**\n * Functional version of UseCase class.\n * The user pass a function as UseCase\n * @example\n *\n * const functionalUseCase = ({ dispatcher }) => {\n *   return (...args) => {\n *      dispatcher.dispatch({ type: \"fire\" });\n *   }\n * }\n *\n */\nexport class FunctionalUseCase extends Dispatcher {\n    constructor(functionUseCase, dispatcher) {\n        super();\n        const context = {\n            dispatcher\n        };\n        this.dispatcher = dispatcher;\n        /*\n            const functionalUseCase = ({ dispatcher }) => {\n                return (...args) => { } // <= executor\n            }\n         */\n        this.executor = functionUseCase(context);\n        this.id = generateNewId();\n        this.name = functionUseCase.displayName || functionUseCase.name || defaultUseCaseName;\n    }\n    /**\n     * execute functional UseCase\n     */\n    execute(..._) {\n        return this.executor(..._);\n    }\n    /**\n     * implementation throwError\n     * @param error\n     */\n    throwError(error) {\n        const meta = new DispatcherPayloadMetaImpl({\n            useCase: this,\n            dispatcher: this,\n            isTrusted: true,\n            isUseCaseFinished: false\n        });\n        const payload = new ErrorPayload({\n            error\n        });\n        this.dispatch(payload, meta);\n    }\n}\n"]}