{"version":3,"sources":["../__obj/src/Dispatcher.js"],"names":["assert","ON_DISPATCH","Dispatcher","isDispatcher","v","onDispatch","dispatch","setMaxListeners","handler","on","removeListener","bind","payload","meta","process","env","NODE_ENV","ok","undefined","type","emit","dispatchOnlyMeta","dispatcher","isTrusted","pipe","toDispatcher","fromName","constructor","name","toName","displayName","delegatePayload"],"mappings":"AAAA;AACA;;;;;;;;;AACA;;IAAYA,M;;AACZ;;AACA;;;;;;;;;;;;AACA;;;AAGO,IAAMC,oCAAc,iBAApB;AACP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuCaC,U,WAAAA,U;;;AACT;;;eAGOC,Y,yBAAaC,C,EAAG;AACnB,YAAIA,aAAaF,UAAjB,EAA6B;AACzB,mBAAO,IAAP;AACH,SAFD,MAGK,IAAI,QAAOE,CAAP,yCAAOA,CAAP,OAAa,QAAb,IAAyB,OAAOA,EAAEC,UAAT,KAAwB,UAAjD,IAA+D,OAAOD,EAAEE,QAAT,KAAsB,UAAzF,EAAqG;AACtG,mBAAO,IAAP;AACH;AACD,eAAO,KAAP;AACH,K;AACD;;;;;AAGA,0BAAc;AAAA;;AAEV;AACA;AAHU,qDACV,wBADU;;AAIV,cAAKC,eAAL,CAAqB,CAArB;AAJU;AAKb;AACD;;;;;;;;;;;;;yBAWAF,U,uBAAWG,O,EAAS;AAChB,aAAKC,EAAL,CAAQR,WAAR,EAAqBO,OAArB;AACA,eAAO,KAAKE,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,EAA+BV,WAA/B,EAA4CO,OAA5C,CAAP;AACH,K;AACD;;;;;yBAGAF,Q,qBAASM,O,EAASC,I,EAAM;AACpB,YAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvChB,mBAAOiB,EAAP,CAAUL,YAAYM,SAAZ,IAAyBN,YAAY,IAA/C,EAAqD,sCAArD;AACAZ,mBAAOiB,EAAP,CAAU,OAAOL,QAAQO,IAAf,KAAwB,WAAlC,EAA+C,qCAA/C;AACA,gBAAIN,SAASK,SAAb,EAAwB;AACpBlB,uBAAOiB,EAAP,CAAUJ,gEAAV,EAAqD,sCAArD;AACH;AACJ;AACD;AACA,YAAIA,gEAAJ,EAA+C;AAC3C,iBAAKO,IAAL,CAAUnB,WAAV,EAAuBW,OAAvB,EAAgCC,IAAhC;AACH,SAFD,MAGK;AACD;AACA,gBAAMQ,mBAAmB,qDAA8B;AACnDC,4BAAY,IADuC;AAEnDC,2BAAW;AAFwC,aAA9B,CAAzB;AAIA,iBAAKH,IAAL,CAAUnB,WAAV,EAAuBW,OAAvB,EAAgCS,gBAAhC;AACH;AACJ,K;AACD;;;;;;;;;;;;;;;;yBAcAG,I,iBAAKC,Y,EAAc;AACf,YAAMC,WAAW,KAAKC,WAAL,CAAiBC,IAAlC;AACA,YAAMC,SAASJ,aAAaE,WAAb,CAAyBC,IAAxC;AACA,YAAME,oCAAkCJ,QAAlC,YAAiDG,MAAvD;AACA,YAAME,kBAAkB,SAASA,eAAT,CAAyBnB,OAAzB,EAAkCC,IAAlC,EAAwC;AAC5DkB,4BAAgBD,WAAhB,GAA8BA,WAA9B;AACAL,yBAAanB,QAAb,CAAsBM,OAAtB,EAA+BC,IAA/B;AACH,SAHD;AAIA,eAAO,KAAKR,UAAL,CAAgB0B,eAAhB,CAAP;AACH,K","file":"Dispatcher.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport * as assert from \"assert\";\nimport { EventEmitter } from \"events\";\nimport { DispatcherPayloadMetaImpl } from \"./DispatcherPayloadMeta\";\n/**\n * @private\n */\nexport const ON_DISPATCH = \"__ON_DISPATCH__\";\n/**\n * Dispatcher is the **central** event bus system.\n *\n * `Dispatcher` class  have these method.\n *\n * - `onDispatch(function(payload){ });`\n * - `dispatch(payload);`\n *\n * It is similar with EventEmitter of Node.js\n * But, Dispatcher use `payload` object as arguments.\n *\n * ## Payload\n *\n * `payload` object must have `type` property.\n * Following object is a minimal `payload` object.\n *\n * ```json\n * {\n *     \"type\": \"type\"\n * }\n * ```\n *\n * Also, You can put any property to payload object.\n *\n * ```json\n * {\n *     \"type\": \"show\",\n *     \"value\": \"value\"\n * }\n * ```\n *\n * ### FAQ\n *\n * Q. Why Almin use `payload` object instead `emit(key, ...args)`?\n *\n * A. It is for optimization and limitation.\n * If apply emit style, we should cast `...args` for passing other dispatcher at every time.\n * So, Almin use `payload` object instead of it without casting.\n */\nexport class Dispatcher extends EventEmitter {\n    /**\n     * if `v` is instance of Dispatcher, return true\n     */\n    static isDispatcher(v) {\n        if (v instanceof Dispatcher) {\n            return true;\n        }\n        else if (typeof v === \"object\" && typeof v.onDispatch === \"function\" && typeof v.dispatch === \"function\") {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * constructor not have arguments.\n     **/\n    constructor() {\n        super();\n        // suppress: memory leak warning of EventEmitter\n        // Dispatcher can listen more than 10 events\n        this.setMaxListeners(0);\n    }\n    /**\n     * Add `handler`(subscriber) to Dispatcher and return unsubscribe function\n     *\n     * ### Example\n     *\n     * ```js\n     * const dispatcher = new Dispatcher();\n     * const unsubscribe = dispatcher.onDispatch((payload, meta) => {});\n     * unsubscribe(); // release handler\n     * ```\n     */\n    onDispatch(handler) {\n        this.on(ON_DISPATCH, handler);\n        return this.removeListener.bind(this, ON_DISPATCH, handler);\n    }\n    /**\n     * Dispatch `payload` to subscribers.\n     */\n    dispatch(payload, meta) {\n        if (process.env.NODE_ENV !== \"production\") {\n            assert.ok(payload !== undefined && payload !== null, \"payload should not null or undefined\");\n            assert.ok(typeof payload.type !== \"undefined\", \"payload's `type` should be required\");\n            if (meta !== undefined) {\n                assert.ok(meta instanceof DispatcherPayloadMetaImpl, \"`meta` object is internal arguments.\");\n            }\n        }\n        // `meta` must be generated by system\n        if (meta instanceof DispatcherPayloadMetaImpl) {\n            this.emit(ON_DISPATCH, payload, meta);\n        }\n        else {\n            // the `payload` object generated by user\n            const dispatchOnlyMeta = new DispatcherPayloadMetaImpl({\n                dispatcher: this,\n                isTrusted: false\n            });\n            this.emit(ON_DISPATCH, payload, dispatchOnlyMeta);\n        }\n    }\n    /**\n     * Delegate payload object to other dispatcher.\n     *\n     * ### Example\n     *\n     * ```js\n     * const a = new Dispatcher();\n     * const b = new Dispatcher();\n     * // Delegate `a` to `b`\n     * a.pipe(b);\n     * // dispatch and `b` can receive it.\n     * a.dispatch({ type : \"a\" });\n     * ```\n     */\n    pipe(toDispatcher) {\n        const fromName = this.constructor.name;\n        const toName = toDispatcher.constructor.name;\n        const displayName = `delegate-payload:${fromName}-to-${toName}`;\n        const delegatePayload = function delegatePayload(payload, meta) {\n            delegatePayload.displayName = displayName;\n            toDispatcher.dispatch(payload, meta);\n        };\n        return this.onDispatch(delegatePayload);\n    }\n}\n"]}